#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define STAGE1 1
#define STAGE2 2
#define STAGE3 3

void real_calculator(void);
double get_real(double current_operand, char c, int status);
double gaesan(double num1, char operator, double num2);
int is_digit(char c);
int is_operator(char c);

void main() {	
	
	real_calculator();
}

void real_calculator(void) {
	char c = '0';
	int stage = STAGE1;
	double num1 = 0.0, num2 = 0.0, result = 0.0;
	char operator="0";
	int status = 0;
	
	while (c != 'x') {
		
		c = getchar();
		/// char 형 c 가 엔터라는걸 체크하질 않음
		/// c=="\n' -> c=='\n'		"대신 '를 사용해야함
		if(c=='\n'){
			printf("getchar-enter status-%d stage-%d operator-%c result-%f  ", status, stage, operator, result);
			printf("num1 : %f, num2 : %f\n", num1, num2);		
		}
		else {
			printf("getchar-%c status-%d stage-%d operator-%c result-%f  ", c, status, stage, operator, result);
			printf("num1 : %f, num2 : %f\n", num1, num2);
		}

		if (stage == STAGE1) {
			
			if (is_digit(c)) {
				num1 = get_real(num1, c, status);
			}
			else if (c == '.') {
				status = status + 1;
			}
			else if (is_operator(c)) {
				operator = c;
				status = 0;
				stage  = STAGE2;
			}
		}
		else if (stage == STAGE2) {
			if (is_digit(c)) {
				num2 = get_real(num2, c, status);
			}
			else if (c == '.') {
				status++;
			}
			else if (c == '\n') {
				result = gaesan(num1, operator, num2);
				printf("= %.2f", result);
				stage = STAGE3;
			}
		}
		else if (stage == STAGE3) {
			if (is_operator(c)) {
				num1 = result;
				operator = c;
				stage = STAGE2;
			}
			else if(c == '\n') {
				status = 0;
				num1 = 0; num2 = 0;
				stage = STAGE1;
			}
		}

	}

}

double gaesan(double num1, char operator, double num2) {
	double result;
	if (operator == "+") {
		result = num1 + num2;
	}else if (operator == "-") {
		result = num1 - num2;
	}else if(operator == "*") {
		result = num1 * num2;
	}else if(operator == "/") {
		result = num1 / num2;
	}
	return result;
}

int is_digit(char c) {
	if ('0' <= c && c <= '9') {
		return 1;
	}
	else {
		return 0;
	}
}

int is_operator(char c) {
	if (c == '+' || c == '-' || c == '*' || c == '/') {
		return 1;
	}
	else {
		return 0;
	}
}


double get_real(double current_operand, char c, int status) {
	/*
	if status == 0
		new_value = c - '0'
		current_operand *= 10
		current_operand += new_value
		return current_operand

	else if status != 0
		new_value = c - '0'
		for (i<-0 i<status i++)
			new_value /= 10
		END for

		current_operand+=new_value
		return current_operand

	END if	
	*/
	
	double new_value;
	
	if (status == 0) {
		new_value = c - '0';
		printf("new value %f\n", new_value);
		
		current_operand *= 10;
		current_operand += new_value;
		printf("current operand %f\n\n", current_operand);
	}
	else {
		new_value = c - '0';
		printf("new value %f\n", new_value);
		for (int i = 0; i < status; i++)
			new_value /= 10;
		current_operand += new_value;
		printf("current operand %f\n\n", current_operand);
	}
	return current_operand;
}
